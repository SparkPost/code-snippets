# Including the SparkPost Node.js SDK in a Node.js Application

## Make sure to keep your SparkPost API Key Server-Side

We recommend that you use a [Configuration Control](https://www.npmjs.com/package/config) or similar approach. This lends itself to being used in the following manner:

1. ```npm install --save-dev --save config```

2. Include the SparkPost Node.js SDK

```
npm install --save sparkpost```
```

3. Environment configuration:

In /config/default.json (could change this based on environment)

```
{
  "services": {
    "sparkpost": {
      "apiBaseURL": "https://api.sparkpost.com/api/v1",
      "apiKey": "<YOUR_SPARKPOST_API_KEY_HERE>"
    }
  }
}
```

4. Pull your environment configuration into your application.

```
'use strict';

var config = require( 'config' );

// Define our SparkPost API Key
var SP = require( 'sparkpost' )({
  "key": config.sparkpost.apiKey
});

5. Configure the data for the email you wish to transmit via SparkPost

```
var txObject = {
  campaign: '<YOUR_CAMPAIGN>',
  from: '<USER@YOUR_SENDING_DOMAIN.TLD>',
  subject: '<YOUR_EMAIL_SUBJECT_LINE>',
  html: '<YOUR_EMAIL_HTML_HERE>',
  text: '<YOUR_EMAIL_TEXT_HERE>',
  substitutionData: {
    <YOUR_SUBSTITUTION_DATA_KEY_VALUE_PAIRS_HERE>
  },
  recipients: [
    <YOUR_LIST_OF_RECIPIENT_OBJECTS_HERE>
  ]
};
```

6. Define a response handler

```
var txResponseHandler = function txResponseHandler( err, data ) {
  if( err ) {
    console.error( 'ERROR: ' + err );
    new Error( err );
  } else {
    console.log( 'WOOHOO, Transmission accepted by SparkPost!' );
    console.log( data );
  }
};
```

7. Simplify sending transmission and response handling using the SparkPost Node SDK Transmission request

```
SP.transmission.send( txObject, txResponseHandler );

```
